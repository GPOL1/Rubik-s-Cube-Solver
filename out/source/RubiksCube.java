/* autogenerated by Processing revision 1296 on 2025-03-19 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import peasy.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class RubiksCube extends PApplet {



PeasyCam cam;

int UPP = 0;
int DWN = 1;
int RGT = 2;
int LFT = 3;
int FRT = 4;
int BCK = 5;

int[] colors = {0xFFFFFFFF, 0xFFFFFF00, 0xFFFFA500, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF};

int dim = 3;
Box[] cube = new Box[dim*dim*dim];

public void setup() {
  /* size commented out by preprocessor */;
  cam = new PeasyCam(this, 400);
  int index = 0;
  for (int x = -1; x <= 1; x++){
    for (int y = -1; y <= 1; y++){
      for (int z = -1; z <= 1; z++){

        PMatrix3D matrix = new PMatrix3D();
        matrix.translate(x,y,z);

        cube[index] = new Box(matrix, x, y, z);
        index++;

      }
    }
  }
}

public void turnZ(int pos, int dir) {
  for (int i = 0; i < cube.length; i++){
    if (cube[i].z == pos){
      PMatrix2D matrix = new PMatrix2D();
      matrix.rotate(HALF_PI * dir);
      matrix.translate(cube[i].x,cube[i].y);
      cube[i].update(round(matrix.m02),round(matrix.m12),cube[i].z);
      cube[i].turnFacesZ(dir);
    }
  }
}

public void turnY(int pos, int dir) {
  for (int i = 0; i < cube.length; i++){
    if (cube[i].y == pos){
      PMatrix2D matrix = new PMatrix2D();
      matrix.rotate(HALF_PI * dir);
      matrix.translate(cube[i].x,cube[i].z);
      cube[i].update(round(matrix.m02),cube[i].y,round(matrix.m12));
      cube[i].turnFacesY(dir);
    }
  }
}

public void turnX(int pos, int dir) {
  for (int i = 0; i < cube.length; i++){
    if (cube[i].x == pos){
      PMatrix2D matrix = new PMatrix2D();
      matrix.rotate(HALF_PI * dir);
      matrix.translate(cube[i].y,cube[i].z);
      cube[i].update(cube[i].x,round(matrix.m02),round(matrix.m12));
      cube[i].turnFacesX(dir);
    }
  }
}

public void keyPressed(){
  switch (key){
  case 'f':
    turnZ(1,1);
    break;
  case 'F':
    turnZ(1,-1);
    break;
  case 'b':
    turnZ(-1,1);
    break;
  case 'B':
    turnZ(-1,-1);
    break;
  case 'd':
    turnY(1,1);
    break;
  case 'D':
    turnY(1,-1);
    break;
  case 'u':
    turnY(-1,1);
    break;
  case 'U':
    turnY(-1,-1);
    break;
  case 'l':
    turnX(-1,1);
    break;
  case 'L':
    turnX(-1,-1);
    break;
  case 'r':
    turnX(1,1);
    break;
  case 'R':
    turnX(1,-1);
    break;
  case '1':
    turnX(0,1);
    break;
  case '2':
    turnX(0,-1);
    break;
  case '3':
    turnY(0,1);
    break;
  case '4':
    turnY(0,-1);
    break;
  }
}

public void draw() {
  background(51);
  scale(60);
  for (int i = 0; i < cube.length; i++){
    cube[i].show();
  }
}
class Box {
  PMatrix3D matrix;
  int x = 0;
  int y = 0;
  int z = 0;
  int c;
  Face[] faces = new Face[6];
  
  Box(PMatrix3D m, int x, int y, int z) {
    this.matrix = m;
    this.x = x;
    this.y = y;
    this.z = z;
    c = color(255);

    faces[0] = new Face(new PVector(0,0,-1), color(0,0,255));
    faces[1] = new Face(new PVector(0,0,1), color(0,255,0));
    faces[2] = new Face(new PVector(0,1,0), color(255,255,255));
    faces[3] = new Face(new PVector(0,-1,0), color(255,255,0));
    faces[4] = new Face(new PVector(1,0,0), color(255,150,0));
    faces[5] = new Face(new PVector(-1,0,0), color(255,0,0));
  }
  
  public void update(int x, int y, int z) {
    matrix.reset();
    matrix.translate(x,y,z);
    this.x = x;
    this.y = y;
    this.z = z;
  }

  public void turnFacesZ(int dir){
    for (Face f: faces){
      f.turnZ(dir * HALF_PI);
    }
  }

  public void turnFacesY(int dir){
    for (Face f: faces){
      f.turnY(dir * HALF_PI);
    }
  }

  public void turnFacesX(int dir){
    for (Face f: faces){
      f.turnX(dir * HALF_PI);
    }
  }

  public void show() {
    noFill();
    stroke(0);
    strokeWeight(0.1f);
    pushMatrix();
    applyMatrix(matrix);

    box(1);
    for (Face f: faces){
      f.show();
    }

    popMatrix();
  }
}
class Face {
    PVector normal;
    int c;

    Face(PVector normal, int c){
        this.normal = normal;
        this.c = c;
    }

    public void show(){
        pushMatrix();
        fill(c);
        noStroke();
        rectMode(CENTER);
        translate(0.5f * normal.x, 0.5f * normal.y, 0.5f * normal.z);
        if (abs(normal.x) > 0){
            rotateY(HALF_PI);
        } else if (abs(normal.y) > 0){
            rotateX(HALF_PI);
        }
        square(0, 0, 1);
        popMatrix();
    }

    public void turnZ(float angle){
        PVector temp = new PVector();
        temp.x = round(normal.x * cos(angle) - normal.y * sin(angle));
        temp.y = round(normal.x * sin(angle) + normal.y * cos(angle));
        temp.z = round(normal.z);
        normal = temp;
    }
    
    public void turnY(float angle){
        PVector temp = new PVector();
        temp.x = round(normal.x * cos(angle) - normal.z * sin(angle));
        temp.z = round(normal.x * sin(angle) + normal.z * cos(angle));
        temp.y = round(normal.y);
        normal = temp;
    }

    public void turnX(float angle){
        PVector temp = new PVector();
        temp.y = round(normal.y * cos(angle) - normal.z * sin(angle));
        temp.z = round(normal.y * sin(angle) + normal.z * cos(angle));
        temp.x = round(normal.x);
        normal = temp;
    }
}


  public void settings() { size(600, 600, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "RubiksCube" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
