/* autogenerated by Processing revision 1296 on 2025-04-07 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import peasy.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class RubiksCube extends PApplet {




PeasyCam cam;

int dim = 3;
Box[] cube = new Box[dim*dim*dim];
Move move;
String turning = "";
int direction = 0;
int position = 0;
boolean  shuffling = false;
char posMoves[] = {'f', 'b', 'u', 'd', 'l', 'r', '1', '2', '3', '4', '5', '6'};

Button shuffle = new Button(100, 100, 100, 100, "Shuffle");
Button exit = new Button(100, 100, 100, 200, "Exit");

public void setup() {
  /* size commented out by preprocessor */;
  cam = new PeasyCam(this, 400);
  int index = 0;
  for (int x = -1; x <= 1; x++){
    for (int y = -1; y <= 1; y++){
      for (int z = -1; z <= 1; z++){

        PMatrix3D matrix = new PMatrix3D();
        matrix.translate(x,y,z);

        cube[index] = new Box(matrix, x, y, z);
        index++;

      }
    }
  }  
  move = new Move(0, 0, 0, 0);
}

public void turnZ(int pos, int dir) {
  for (int i = 0; i < cube.length; i++){
    if (cube[i].z == pos){
      animate("z", dir, pos);
    }
  }
}

public void turnY(int pos, int dir) {
  for (int i = 0; i < cube.length; i++){
    if (cube[i].y == pos){
      animate("y", dir, pos);
    }
  }
}

public void turnX(int pos, int dir) {
  for (int i = 0; i < cube.length; i++){
    if (cube[i].x == pos){
      animate("x", dir, pos);
    }
  }
}

public void turnZ1(int pos, int dir) {
  for (int i = 0; i < cube.length; i++){
    if (cube[i].z == pos){
      PMatrix2D matrix = new PMatrix2D();
      matrix.rotate(HALF_PI * dir);
      matrix.translate(cube[i].x,cube[i].y);
      cube[i].update(round(matrix.m02),round(matrix.m12),cube[i].z);
      cube[i].turnFacesZ(dir);
    }
  }
}

public void turnY1(int pos, int dir) {
  for (int i = 0; i < cube.length; i++){
    if (cube[i].y == pos){
      PMatrix2D matrix = new PMatrix2D();
      matrix.rotate(HALF_PI * dir);
      matrix.translate(cube[i].x,cube[i].z);
      cube[i].update(round(matrix.m02),cube[i].y,round(matrix.m12));
      cube[i].turnFacesY(dir);
    }
  }
}

public void turnX1(int pos, int dir) {
  for (int i = 0; i < cube.length; i++){
    if (cube[i].x == pos){
      PMatrix2D matrix = new PMatrix2D();
      matrix.rotate(HALF_PI * dir);
      matrix.translate(cube[i].y,cube[i].z);
      cube[i].update(cube[i].x,round(matrix.m02),round(matrix.m12));
      cube[i].turnFacesX(dir);
    }
  }
}

public void animate(String axis, int dir, int pos){
  turning = axis;
  direction = dir;
  position = pos;
  if (turning == "z"){
    move = new Move(0, 0, position, direction);
  } else if (turning == "y"){
    move = new Move(0, position, 0, direction);
  } else if (turning == "x"){
    move = new Move(position, 0, 0, direction);
  }
  move.start();
}

public void keyPressed(){
  applyMove(key);
}

public void applyMove(char moves){
  if (move.animating == false){
    switch (moves){
    case 'f':
      turnZ(1,1);
      break;
    case 'F':
      turnZ(1,-1);
      break;
    case 'b':
      turnZ(-1,1);
      break;
    case 'B':
      turnZ(-1,-1);
      break;
    case 'd':
      turnY(1,1);
      break;
    case 'D':
      turnY(1,-1);
      break;
    case 'u':
      turnY(-1,1);
      break;
    case 'U':
      turnY(-1,-1);
      break;
    case 'l':
      turnX(-1,1);
      break;
    case 'L':
      turnX(-1,-1);
      break;
    case 'r':
      turnX(1,1);
      break;
    case 'R':
      turnX(1,-1);
      break;
    case '1':
      turnX(0,1);
      break;
    case '2':
      turnX(0,-1);
      break;
    case '3':
      turnY(0,1);
      break;
    case '4':
      turnY(0,-1);
      break;
    case '5':
      turnZ(0,1);
      break;
    case '6':
      turnZ(0,-1);
      break;
    }
  }
}

public void draw() {
  background(51);

  if (shuffling){
    shuffleCube();
  }

  cube();
  hud();
}

public void cube(){
  move.update();

  pushMatrix();
  scale(60);
  for (int i = 0; i < cube.length; i++){
    push();
    if (turning != ""){
      if (cube[i].z == move.z && turning == "z"){
        rotateZ(move.angle);
      } else if (cube[i].y == move.y && turning == "y"){
        rotateY(-move.angle);
      } else if (cube[i].x == move.x && turning == "x"){
        rotateX(move.angle);
      }
    }
    
    cube[i].show();
    pop();

    if (move.animating == false){
      if (turning == "z"){
        turnZ1(position, direction);
      } else if (turning == "y"){
        turnY1(position, direction);
      } else if (turning == "x"){
        turnX1(position, direction);
      }
      turning = "";
      direction = 0;
    }
  }
  popMatrix();
}

public void hud(){
  cam.beginHUD();
  hint(DISABLE_DEPTH_TEST);

  resetMatrix();

  shuffle.draw();
  exit.draw();

  hint(ENABLE_DEPTH_TEST);
  cam.endHUD();
}

public void mousePressed(){
  if(shuffle.isClicked()){
    if (!shuffling){
      shuffle = new Button(100, 100, 100, 100, "Stop Shuffle");
    } else {
      shuffle = new Button(100, 100, 100, 100, "Shuffle");
    }
    shuffling = !shuffling;
  } else if(exit.isClicked()){
    exit();
  }
}

public void shuffleCube(){
  applyMove(posMoves[PApplet.parseInt(random(posMoves.length))]);
}
class Box {
  PMatrix3D matrix;
  int x = 0;
  int y = 0;
  int z = 0;
  int c;
  Face[] faces = new Face[6];
  
  Box(PMatrix3D m, int x, int y, int z) {
    this.matrix = m;
    this.x = x;
    this.y = y;
    this.z = z;
    c = color(255);

    faces[0] = new Face(new PVector(0,0,-1), color(0,0,255));
    faces[1] = new Face(new PVector(0,0,1), color(0,255,0));
    faces[2] = new Face(new PVector(0,1,0), color(255,255,255));
    faces[3] = new Face(new PVector(0,-1,0), color(255,255,0));
    faces[4] = new Face(new PVector(1,0,0), color(255,150,0));
    faces[5] = new Face(new PVector(-1,0,0), color(255,0,0));
  }
  
  public void update(int x, int y, int z) {
    matrix.reset();
    matrix.translate(x,y,z);
    this.x = x;
    this.y = y;
    this.z = z;
  }

  public void turnFacesZ(int dir){
    for (Face f: faces){
      f.turnZ(dir * HALF_PI);
    }
  }

  public void turnFacesY(int dir){
    for (Face f: faces){
      f.turnY(dir * HALF_PI);
    }
  }

  public void turnFacesX(int dir){
    for (Face f: faces){
      f.turnX(dir * HALF_PI);
    }
  }

  public void show() {
    noFill();
    stroke(0);
    strokeWeight(0.1f);
    pushMatrix();
    applyMatrix(matrix);

    box(1);
    for (Face f: faces){
      f.show();
    }

    popMatrix();
  }
}
class Button{
    int w = 100;
    int h = 100;
    int x = 100;
    int y = 100;
    String label = "";
    boolean hover = false;

    Button(int w, int h, int x, int y, String label){
        this.w = w;
        this.h = h;
        this.x = x;
        this.y = y;
        this.label = label;
    }

    public void update(){
        hover = (mouseX > x && mouseX < x + w && mouseY > y && mouseY < y + h);
    }

    public void draw(){
        update();
        if (hover) {
            fill(color(100));
        } else {
            fill(color(200));
        }
        stroke(0);
        strokeWeight(1);
        rect(x,y,w,h);
        fill(0);
        textAlign(CENTER, CENTER);
        text(label, x + w/2, y + h/2);
    }

    public boolean isClicked(){
        return hover && mousePressed;
    }
}
class Face {
    PVector normal;
    int c;

    Face(PVector normal, int c){
        this.normal = normal;
        this.c = c;
    }

    public void show(){
        pushMatrix();
        fill(c);
        noStroke();
        rectMode(CENTER);
        translate(0.5f * normal.x, 0.5f * normal.y, 0.5f * normal.z);
        if (abs(normal.x) > 0){
            rotateY(HALF_PI);
        } else if (abs(normal.y) > 0){
            rotateX(HALF_PI);
        }
        square(0, 0, 1);
        popMatrix();
    }

    public void turnZ(float angle){
        PVector temp = new PVector();
        temp.x = round(normal.x * cos(angle) - normal.y * sin(angle));
        temp.y = round(normal.x * sin(angle) + normal.y * cos(angle));
        temp.z = round(normal.z);
        normal = temp;
    }
    
    public void turnY(float angle){
        PVector temp = new PVector();
        temp.x = round(normal.x * cos(angle) - normal.z * sin(angle));
        temp.z = round(normal.x * sin(angle) + normal.z * cos(angle));
        temp.y = round(normal.y);
        normal = temp;
    }

    public void turnX(float angle){
        PVector temp = new PVector();
        temp.y = round(normal.y * cos(angle) - normal.z * sin(angle));
        temp.z = round(normal.y * sin(angle) + normal.z * cos(angle));
        temp.x = round(normal.x);
        normal = temp;
    }
}
class Move {
    float angle = 0;
    int x = 0;
    int y = 0;
    int z = 0;
    int dir = 0;
    boolean animating = false;

    Move(int x, int y, int z, int dir){
        this.x = x;
        this.y = y;
        this.z = z;
        this.dir = dir;
    }

    public void start(){
        animating = true;
    }

    public void update(){
        if (animating == true){
            angle += dir * 0.1f;
            if (abs(angle) > HALF_PI){
                angle = 0;
                animating = false;
            }
        }
    }
}


  public void settings() { size(1920, 1080, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "RubiksCube" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
